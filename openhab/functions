#!/bin/bash


echoTTS(){
    echo -e "\e[96mWas soll gesagt werden?\e[0m"
    read -e answer

    [[ -z "${answer}" ]] && echo -e "\e[31mEs wurde kein Text angegeben!" && exit 1

    item_send Sprachassistent_EchoDot_Lautstaerke_Proxy 80
    sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send Sprachassistent_EchoDot_TTS \"${answer}\""

    exit
}


_item_completions(){
    allItems=$(curl -X GET "http://localhost:8080/rest/items/" 2>/dev/null | sed 's/,/\n/g' | grep name | grep -v Gruppe | sed 's/name//g' | sed 's/[":]//g')
    local beginning="${COMP_WORDS[${COMP_CWORD}]}"

    for item in $( echo ${allItems} | sed 's/ /\n/g' | grep -P "^${beginning}"); do
	    COMPREPLY=("${COMPREPLY[@]}" "${item}")
    done
}


complete -F _item_completions item_get item_send item_toggle search_log search_string


item_get(){

    [ -z ${1} ] && echo -e "\e[31mEs wurde kein Item angegeben\e[0m" && return 1

    for item in ${@} ; do
        state=$(curl -X GET "http://localhost:8080/rest/items/${item}/state" 2>/dev/null)
        [[ "${state}" == *"does not exist!"* ]] && echo -e "\n\e[31mDas angegebene Item \"${item}\" existiert nicht\e[0m" && return 1
        echo -e "\e[36mItem:\e[0m\t${item}\n\e[36mStatus:\e[0m\t${state}"
    done
}


item_send(){
    [[ -z ${1} ]]    && echo -e "\e[31mEs wurde kein Item angegeben\e[0m"           && return 1
    [[ -z ${2} ]]    && echo -e "\e[31mEs wurde kein Status angegeben\e[0m"         && return 1
    [[ ${#} -gt 2 ]] && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1

    oldState=$(curl -X GET "http://localhost:8080/rest/items/${1}/state" 2>/dev/null)
    [[ "${oldState}" == *"does not exist!"* ]] && echo -e "\e[31mDas angegebene Item existiert nicht\e[0m" && return 1

    echo -e "\e[36mItem:\e[0m\t\t${1}"
    echo -e "\e[36mAlter Status:\e[0m\t${oldState}"

    outputFile=$(mktemp)
    sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send ${1} ${2}" > ${outputFile}

    if [[ $(cat ${outputFile}) == *"not valid"* ]]; then
        echo -e "\n\e[33mDas Kommando konnte nicht gesendet werden.\e[0m Mögliche Kommandos sind:"
        cat ${outputFile} | tail -n +3 | sed 's/  /  - /g'
        echo -ne "Es wird versucht ein Update für den Status durchzuführen\r"
        sudo -u openhab ssh openhab@localhost -p8101 "smarthome:update ${1} ${2}" > ${outputFile}

        if [[ $(cat ${outputFile}) == *"not valid"* ]]; then
            echo -e "\e[31mDer neue Status wurde auch vom update nicht akzeptiert! \e[0m"
            rm -f ${outputFile}
            return 1
        fi

        echo -e "\e[32mDer Status wurde erfolgreich upgedated                  \e[0m\n"

    else
        echo -e "\e[32mDas Kommando wurde erfolgreich gesendet\e[0m"

    fi

    echo -e "\e[36mNeuer Status:\e[0m\t${2}\e[0m"
    rm -f ${outputFile}
}


item_toggle(){
    [[ -z ${1} ]]    && echo -e "\e[31mEs wurde kein Item angegeben\e[0m"           && return 1
    [[ ${#} -gt 1 ]] && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1

    oldState=$(curl -X GET http://localhost:8080/rest/items/${1}/state 2>/dev/null)
    [[ "${oldState}" == *"does not exist!"* ]] && echo -e "\e[31mDas angegebene Item existiert nicht\e[0m" && return 1

    echo -e "\e[36mItem:\e[0m\t\t${1}"
    echo -e "\e[36mAlter Status:\e[0m\t${oldState}"

    if [[ ${oldState} =~ (ON|On|on) ]]; then
        newState="OFF"

    elif [[ ${oldState} =~ (OFF|Off|off) ]]; then
        newState="ON"

    elif [[ ${oldState} == "OPEN" ]]; then
        newState="CLOSED"

    elif [[ ${oldState} == "CLOSED" ]]; then
        newState="OPEN"

    else
        echo -e "\n\e[33mDer neue Status konnte nicht bestimmt werden\e[0m" && return 1
    fi

    ${setNewStateOutput}=$(sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send ${1} ${newState}")

    [[ "${setNewStateOutput}" == *"not valid"* ]] && echo -e "\e[31m${setNewStateOutput}\e[0m" && return 1

    echo -e "\e[36mNeuer Status:\e[0m\t${newState}\e[0m"
    echo -e "\e[32mDas Kommando wurde erfolgreich gesendet\e[0m"
}


alias log='log_function'

log_function(){
    tail -n 2000 -f /var/log/openhab2/events.log | sed --unbuffered \
    -e 's/\(UNINITIALIZED\)/\o033[31m\1\o033[0m/' \
    -e 's/\(UNKNOWN\)/\o033[31m\1\o033[0m/' \
    -e 's/\(OFFLINE\)/\o033[31m\1\o033[0m/' \
    -e 's/\(ONLINE\)/\o033[32m\1\o033[0m/' \
    -e 's/\(Offline\)/\o033[31m\1\o033[0m/' \
    -e 's/\(Online\)/\o033[32m\1\o033[0m/' \
    -e 's/\(offline\)/\o033[31m\1\o033[0m/' \
    -e 's/\(online\)/\o033[32m\1\o033[0m/' \
    \
    -e 's/\(WARN\)/\o033[31m\1\o033[0m/' \
    -e 's/\(ERROR\)/\o033[31m\1\o033[0m/' \
    -e 's/\(Error\)/\o033[31m\1\o033[0m/' \
    -e 's/\(INFO\)/\o033[32m\1\o033[0m/'
}


ssh_permissions(){
    chmod 700 ~/.ssh
    chmod 644 ~/.ssh/id_ed25519.pub
    chmod 600 ~/.ssh/id_ed25519 ~/.ssh/authorized_keys ~/.ssh/config
    sudo -u openhab chmod 700 /var/lib/openhab2/.ssh
    sudo -u openhab chmod 644 /var/lib/openhab2/.ssh/id_ed25519.pub
    sudo -u openhab chmod 600 /var/lib/openhab2/.ssh/id_ed25519 #/var/lib/openhab2/.ssh/config
}


fix_permissions(){
    cd /etc/openhab2/

    echo -e "Fix Permissions:\n\t1. Apply Improvements\n\t2. Fix Permissions"
    sudo openhabian-config

    sudo chmod -R 770 .
    ssh_permissions

    echo -e "\e[92mDone\e[0m"
    cd - >/dev/null
}


search_log(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Suchbegriff angegeben\e[0m" && return 1

    grep -in "${1}" --color=always /var/log/openhab2/events.log || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
}
