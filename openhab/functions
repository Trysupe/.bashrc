#!/bin/bash


echoTTS(){
    echo -e "\e[96mWas soll gesagt werden?\e[0m"
    read -e answer
    [[ -z "$answer" ]] && echo -e "\e[31mEs wurde kein Text angegeben!" && return 1
    echo
    sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send Sprachassistent_EchoDot_TTS \"${answer}\""
}


_item_completions(){
    items=$(curl -X GET "http://localhost:8080/rest/items/" 2>/dev/null | sed 's/,/\n/g' | grep name | grep -v Gruppe | sed 's/name//g' | sed 's/[":]//g')
    local anfang="${COMP_WORDS[$COMP_CWORD]}"

    for item in $( echo $items | sed 's/ /\n/g' | grep -P "^$anfang"); do
	    COMPREPLY=("${COMPREPLY[@]}" "$item")
    done
}


complete -F _item_completions item_get item_set item_toggle search_log search_string


item_get(){
    [ -z ${1} ] && echo -e "\e[31mEs wurde kein Item angegeben\e[0m" && return 1
    for item in $@ ; do
        status=$(curl -X GET "http://localhost:8080/rest/items/$item/state" 2>/dev/null)
        [[ "$status" == *"does not exist!"* ]] && echo -e "\n\e[31mDas angegebene Item \"$item\" existiert nicht\e[0m" && return 1
        echo -e "\e[36mItem:\e[0m\t$item\n\e[36mStatus:\e[0m\t$status"
    done

    # [[ $# == 1 ]] && item_suche ${1}
}


item_set(){
    [ -z ${1} ] && echo -e "\e[31mEs wurde kein Item angegeben\e[0m"            && return 1
    [ -z ${2} ] && echo -e "\e[31mEs wurde kein Status angegeben\e[0m"          && return 1
    [ $# -gt 2 ] && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1

    alter_status=$(curl -X GET "http://localhost:8080/rest/items/${1}/state" 2>/dev/null)
    [[ "$alter_status" == *"does not exist!"* ]] && echo -e "\e[31mDas angegebene Item existiert nicht\e[0m" && return 1

    echo -e "\e[36mItem:\e[0m\t\t${1}"
    echo -e "\e[36mAlter Status:\e[0m\t$alter_status"


    neuer_status_setzen=$(sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send ${1} ${2}")
    [[ "$neuer_status_setzen" == *"not valid"* ]] && echo -e "\e[31m$neuer_status_setzen\e[0m" && return 1
    echo -e "\e[36mNeuer Status:\e[0m\t${2}\e[0m"
    echo -e "\e[32mDas Kommando wurde erfolgreich gesendet\e[0m"

    # item_suche ${1}
}

item_toggle(){
    [ -z ${1} ] && echo -e "\e[31mEs wurde kein Item angegeben\e[0m" && return 1
    [ $# -gt 1 ] && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1

    alter_status=$(curl -X GET http://localhost:8080/rest/items/${1}/state 2>/dev/null)
    [[ "$alter_status" == *"does not exist!"* ]] && echo -e "\e[31mDas angegebene Item existiert nicht\e[0m" && return 1

    echo -e "\e[36mItem:\e[0m\t\t${1}"
    echo -e "\e[36mAlter Status:\e[0m\t$alter_status"
    if [[ $alter_status == "ON" || $alter_status == "On" || $alter_status == "on" ]]; then
        neuer_status="OFF"
    elif [[ $alter_status == "OFF" || $alter_status == "Off" || $alter_status == "off" ]]; then
        neuer_status="ON"
    elif [[ $alter_status == "OPEN" ]]; then
        neuer_status="CLOSED"
    elif [[ $alter_status == "CLOSED" ]]; then
        neuer_status="OPEN"
    else
        echo -e "\n\e[33mDer neue Status konnte nicht bestimmt werden\e[0m" && return 1
    fi

    neuer_status_setzen=$(sudo -u openhab ssh openhab@localhost -p8101 "smarthome:send ${1} ${neuer_status}")
    [[ "$neuer_status_setzen" == *"not valid"* ]] && echo -e "\e[31m$neuer_status_setzen\e[0m" && return 1
    echo -e "\e[36mNeuer Status:\e[0m\t${neuer_status}\e[0m"
    echo -e "\e[32mDas Kommando wurde erfolgreich gesendet\e[0m"

    # item_suche ${1}
}


item_suche(){
    echo -e "\n${1}\e[36m wird hier gefunden:\e[0m"
    cd /etc/openhab2
    search_string ${1}
    cd - >/dev/null
}


alias log='log_function'

log_function(){
    tail -n 2000 -f /var/log/openhab2/events.log | sed --unbuffered \
    -e 's/\(UNINITIALIZED\)/\o033[31m\1\o033[0m/' \
    -e 's/\(UNKNOWN\)/\o033[31m\1\o033[0m/' \
    -e 's/\(OFFLINE\)/\o033[31m\1\o033[0m/' \
    -e 's/\(ONLINE\)/\o033[32m\1\o033[0m/' \
    -e 's/\(Offline\)/\o033[31m\1\o033[0m/' \
    -e 's/\(Online\)/\o033[32m\1\o033[0m/' \
    -e 's/\(offline\)/\o033[31m\1\o033[0m/' \
    -e 's/\(online\)/\o033[32m\1\o033[0m/' \
    \
    -e 's/\(WARN\)/\o033[31m\1\o033[0m/' \
    -e 's/\(ERROR\)/\o033[31m\1\o033[0m/' \
    -e 's/\(Error\)/\o033[31m\1\o033[0m/' \
    -e 's/\(INFO\)/\o033[32m\1\o033[0m/'
}


ssh_permissions(){
    chmod 700 ~/.ssh
    chmod 644 ~/.ssh/id_ed25519.pub
    chmod 600 ~/.ssh/id_ed25519 ~/.ssh/authorized_keys ~/.ssh/config
    sudo -u openhab chmod 700 /var/lib/openhab2/.ssh
    sudo -u openhab chmod 644 /var/lib/openhab2/.ssh/id_ed25519.pub
    sudo -u openhab chmod 600 /var/lib/openhab2/.ssh/id_ed25519 #/var/lib/openhab2/.ssh/config
}


fix_permissions(){
    cd /etc/openhab2/
    echo -e "Fix Permissions:\n\t1. Apply Improvements\n\t2. Fix Permissions"
    sudo openhabian-config
    sudo chmod -R 770 .
    ssh_permissions
    echo -e "\e[92mDone\e[0m"
    cd - >/dev/null
}

search_log(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Suchbegriff angegeben\e[0m" && return
    grep -in "${1}" --color=always /var/log/openhab2/events.log || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
}
