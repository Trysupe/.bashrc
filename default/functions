#!/bin/bash

cl(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Pfad angegeben\e[0m"           && return 1
    [ $# -gt 1 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1
    cd "${1}"
    ls
}

diffcommit(){ #Zeigt Änderungen eines Git Commits an
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Commit Hash angegeben\e[0m"    && return 1
    [ $# -gt 1 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1
    if [[ "$(git status 2>&1)" =~ (Kein Git-Repo|not a git repository) ]]; then
        echo -e "\e[31mEs wurde kein GIT Repository gefunden\e[0m"
        return 1
    fi
    git diff ${1}~ ${1}
}


file_info(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Dateiname angegeben\e[0m" && return 1
    [[ ${1} == "." ]] && files=$(find . -type f -not -path "*/\.git/*") || files="$@"
    local counter=0
    local anzahl=$(echo $files | wc -w)
	for file in $files; do
		((counter++))
		[[ -d $file ]] && echo -e "\e[31m\"$file\" ist ein Ordner\e[0m" && continue
		[[ ! -f $file ]] && echo -e "\e[31mDie Datei \"$file\" exisitiert nicht\e[0m" && continue
    	dateiname=$(basename $file)
        echo -e "\e[1;96mDateiname:\t$dateiname\e[0m"
        kompletter_pfad=$(realpath $file)
        echo -e "Absoluter Pfad:\t$kompletter_pfad"
    	echo -e "Größe:\t\t$(du -h $file | cut -f1)"
    	echo -e "Anzahl Zeilen:\t$(cat $file | wc -l | sed ':a;s/\B[0-9]\{3\}\>/.&/;ta')" #sed baut Tausender-Punkte ein
    	echo -e "Modifiziert:\t$(find $file -printf "%CH:%CM:%.2CS Uhr, %Cd.%Cm.%CY (%CA)")"
    	echo -e "Besitzer:\t$(find $file -printf "%u")"
    	echo -e "Gruppe:\t\t$(find $file -printf "%g")"
    	echo -e "Rechte:\t\t$(find $file -printf "%M (%m)" | cut -c 2-)"
    	[[ "$dateiname" =~ ^\..{1,} ]] && versteckt="Ja" ||  versteckt="Nein"
        echo -e "Versteckt:\t$versteckt"
        if [[ $(file $file) == *"CRLF"* ]]; then
            [[ "${kompletter_pfad##*.}" == "sh" ]] && zeilenenden="\e[31mCRLF\e[0m" || zeilenenden="CRLF"
        else
            zeilenenden="LF"
        fi
    	echo -e "Zeilenenden:\t$zeilenenden"
        [ "$anzahl" -gt "$counter" ] && echo -e "\n\n"
    done
    return 0
}

git_url(){
    if [[ "$(git status 2>&1)" =~ (Kein Git-Repo|not a git repository) ]]; then
        echo -e "\e[31mEs wurde kein GIT Repository gefunden\e[0m"
        return 1
    fi

    session_typ="lokal"
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        session_typ=ssh
    else
        case $(ps -o comm= -p $PPID 2>/dev/null) in
            sshd|*/sshd) session_typ=ssh;;
        esac
    fi
    local url=$(git config --get remote.origin.url | sed 's/:/\//'| sed 's/\.git//' | sed 's/git@/https:\/\//g')
    local branch=$(git branch | grep "*" | cut -d" " -f2-)
    local open_url="$url"
    [[ $branch =~ (master|main) ]] || open_url+="/-/tree/"$branch

    [[ -z $url ]] && echo -e "\e[31mDie URL konnte nicht bestimmt werden! \e[0m]" && return 1
    echo -e "Repository URL: \e[96m$url\e[0m"
    [[ $branch =~ (master|main) ]] || echo -e "Branch URL: \e[96m$open_url\e[0m"
    [[ $session_typ != "ssh" && $(command -v "xdg-open" 2>/dev/null) != "" && ${1} != "-u" ]] && xdg-open "$open_url"
}

repeat(){
    [ $# -gt 2 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1
    [[ -z ${2} ]] && sleeptime="1.0" || sleeptime=$(echo ${2} | sed 's/,/./')
    local counter=0
    while (true); do
        ((counter ++))

        heading="   $(date +%T)   |   Durchlauf: $counter   |   Alle $(echo $sleeptime | sed 's/\./,/')s   |   Kommando: ${1}   "
        [ "${#heading}" -ge "$(tput cols)" ] && heading="   $(date +%T)   |   Durchlauf: $counter   |   Alle $(echo $sleeptime | sed 's/\./,/')s   "
        echo -e "\n\e[96;1m"; center "$heading"; echo -e "\e[0m"

        bash -c "${1}"
        read -t $sleeptime
    done
}

sa(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Name angegeben\e[0m"             && return 1
    [[ -f ${1} ]] && echo -e "\e[31mDie Datei exisitiert bereits\e[0m"             && return 1
    [ $# -gt 1 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m"   && return 1

    filename="${1}"
    touch $filename
    chmod +x $filename
    if [[ $filename == *".sh" ]]; then
        echo -e "#!/bin/bash\n\n" >> $filename
    elif [[ $filename == *".py" ]]; then
        echo -e "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\n" >> $filename
    fi
    [[ $(command -v code) != "" ]] && code $filename || nano +8 $filename

    echo -e "\e[32mSoll das Script ausgeführt werden?\e[0m"
    read -e answer
    if [[ $answer =~ ^[YyJj]$ ]]; then
        if [[ -f $filename ]]; then
            echo -e "\e[1;96m"; center "$filename"; echo -e "\n\e[0m"
            ./$filename
        else
            echo -e "\e[31mDas Script existiert nicht mehr!\e[0m"
            return 1
        fi
    else
        echo -e "\e[33mDas Script wird nicht ausgeführt\e[0m"
        return 1
    fi
}

search_string(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Suchbegriff angegeben\e[0m"      && return 1
    [ $# -gt 2 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m"   && return 1
    if [[ $# == 1 ]]; then
        grep -inrs --color=always "${1}" ./* || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
    else
        grep -inrs --color=always "${1}" "${2}" || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
    fi
}

search_file(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Suchbegriff angegeben\e[0m"      && return 1
    #Grep, um eine Fehlermeldung bei keinen Suchergebnissen anzeigen zu können und die Fundorte farbig zu markieren
    if [[ $# == 1 ]]; then
        if [[ -n $(find . -maxdepth 1 -type d -iname "customers") && $(hostname) == "frank" ]]; then #Ausnahme für frank
            echo -e "\e[33mSoll auch im customers-Ordner gesucht werden?\e[0m"
            read -e answer
            if [[ $answer =~ ^[YyJj]$ ]]; then
                find . -iname "*${1}*" | grep -i "${1}" --color=always || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
            else
                find . -iname "*${1}*" -not -path "./customers/*" | grep -i "${1}" --color=always || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
            fi
        else
            find . -iname "*${1}*" | grep -i "${1}" --color=always || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
        fi
    else
        local suchbegriff=${1}
        shift
        find "$@" -iname "*$suchbegriff*" | grep -i "$suchbegriff" --color=always || echo -e "\e[33mEs wurden keine Sucherergbnisse gefunden\e[0m"
    fi
}

search_help(){
    echo -e "\e[96mFunktion\t\tBeschreibung\e[0m\n"
    echo -e "search_string\t\tSucht rekursiv nach einem gegebenen String im aktuellen Verzeichnis\n\t\t\t    oder in einem als zweites Argument übergebenen gegeben Verzeichnis"
    echo -e "search_file\t\tSucht rekursiv nach einer Datei mit dem gegebenen Namen im aktuellen Verzeichnis\n\t\t\t    oder in einem als zweites Argument übergebenen gegeben Verzeichnis"
    [[ $(hostname) == "openhab" ]] && echo -e "search_log\t\tSucht nach einem gegebenen String in den Logs"
    echo -e "search_help\t\tZeigt diese Hilfe an"
}

stopwatch(){
    [ $# -lt 1 ] && echo -e "\e[31mEs wurde kein Befehl angegeben\e[0m" && return 1
    local argumente="$(echo $@ | sed 's/"/\\"/g')"
    local start=$(date +%s,%N)
    bash -c "$argumente"
    local end=$(date +%s,%N)
    local _s1=$(echo $start | cut -d',' -f1); local _s2=$(echo $start | cut -d',' -f2)
    local _e1=$(echo $end | cut -d',' -f1);   local _e2=$(echo $end | cut -d',' -f2)
    local dauer="0""$(bc <<< "scale=3; $_e1 - $_s1 + ($_e2 -$_s2)/1000000000")"
    echo -e "\e[1m\n\e[36mDas Auführen hat $(date -u --date @$dauer +%M:%S.%3N) gedauert"
}

tmux_help(){
    echo -e "\e[1;36m"; center "TMUX Hilfe"; echo -e "\n\e[0m" \
    "\nStartkommando:         <\e[1;36mSTRG\e[0m> + <\e[1;36mB\e[0m>\n" \
    "\nTeilen:" \
    "\n    - Horizontal:      <\e[1;36m%\e[0m>" \
    "\n    - Vertikal:        <\e[1;36m\"\e[0m>\n" \
    "\nPanes:" \
    "\n    - Layout wechseln: <\e[1;36mSpace\e[0m>    - Nächstes:            <\e[1;36mO\e[0m>" \
    "\n    - Maximieren:      <\e[1;36mZ\e[0m>        - Panenummer anzeigen: <\e[1;36mQ\e[0m>" \
    "\n    - Schließen:       <\e[1;36mX\e[0m>        - Zu Pane wechseln:    <\e[1;36mQ\e[0m> + <\e[1;36m0-9\e[0m>" \
    "\n                                  - Alternativ:          <\e[1;36mPfeiltasten\e[0m>\n" \
    "\nEinfügen: <\e[1;36mShift\e[0m> + <\e[1;36mMittlere Maustaste\e[0m>"
}

to_lf(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde keine Datei, die umgewandelt werden soll, angegeben\e[0m" && return 1
    if [[ "$1" == "alle" ]]; then
        files=$(find . -type f -not -path "*/\.git/*" | xargs file | grep "CRLF" | cut -d " " -f1 | cut -d ":" -f1)
        [[ -z $files ]] && echo -e "\e[33mEs wurde keine Datei, die CRLF Dateienden hat\e[0m" && return
        echo -e "\e[96mSollen die folgenden Dateien zu LF konvertiert werden?\e[0m\n$(echo $files | sed 's/ /\n/g' | nl)\n"
        read -e answer
        [[ ! $answer =~ (Y|y|J|j) ]] && return
    else
        files=$@
    fi
    for file in $files; do
        [[ "$(file $file)" == *"CRLF"* ]] && zeilenenden="\e[31mCRLF" || zeilenenden="\e[32mLF"
        echo -e "Ändere die Zeilenenden zu LF von \e[96;1m$file\e[0m\n    War davor: $zeilenenden\e[0m"
        tr -d '\015' <$file >"$file""_new"
        mv "$file""_new" $file
    done
}

complete -F _longopt -W "alle" to_lf

upgrade(){
    echo -e "\e[1;96mAPT wird aufgerufen\n\e[0m"
    sudo apt upgrade $1 #Falls -y angegeben wurde
    [[ $? == 0 ]] || return
    echo -e "\n\e[32mUpdates Abgeschlossen\e[0m"
    if [[ $(hostname) == "openhab" ]]; then
        OHIP="localhost"
        item="System_Updates"
        state="0"
        curl -X PUT --header "Content-Type: text/plain" --header "Accept: application/json" -d "$state" "http://$OHIP:8080/rest/items/$item/state"
        echo -e "\e[1;96mDie Anzahl der Updates wurde aktualisiert\e[0m"
    fi
}

which(){
    [[ -z ${1} ]] && echo -e "\e[31mEs wurde kein Programm angegeben\e[0m"       && return 1
    [ $# -gt 2 ]  && echo -e "\e[31mEs wurden zu viele Argumente angegeben\e[0m" && return 1
    type $1
    local isFunction=$(type $1)
    local filelocation=$(bash -c "which $1")
    if [[ ( ! $isFunction == *"ist eine Funktion"* ) && -n $filelocation ]]; then
        if [[ $(file -L  $filelocation) =~ (ASCII|script) ]]; then
            echo -e "\nSoll der Sourcecode angezeigt werden? \e[2m(J/N)\e[0m"
            read -e answer
            if [[ $answer =~ ^[YyJj]$ ]]; then
                less $filelocation
            fi
        else
            if [[ $isFunction != *"Alias"* ]]; then #Nicht anzeigen, wenn es sich um einen Alias handelt
                echo -e "\nEs handelt sich um eine Binärdatei"
            fi
        fi
    fi
    return 0
}