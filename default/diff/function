#!/bin/bash

# shellcheck disable=2155

alias diff='diff_function'

# Wenn ein GPG-Key vorhanden ist benutze ihn
git_signature_arguments="-S"
if [[ -z $(gpg --list-keys 2>/dev/null) && ${UID} != 0 ]]; then
    echo -e "\e[33mEs konnte kein GPG-Key gefunden werden! Commits werden nicht signiert\e[0m"
    git_signature_arguments=""
fi

use_git_signoff=false
[[ ${use_git_signoff} = true ]] && git_signature_arguments+=" -s"

check_for_unmanaged_files() {
    # Prüfen, ob es noch gelöschte, neue oder unversionierte Dateien gibt, diese erst direkt in der Shell bearbeitet werden sollen
    outputOfGitStatus=$(git status 2>&1)
    local dir_before_changed=$(pwd)
    eval cdgrp # Wechseln in das Git-Root Verzeichnis
    if [[ "${outputOfGitStatus}" =~ (Untracked file|Unversioniert) ]]; then
        local untracked_files=$(mktemp)

        git ls-files -o --exclude-standard >"${untracked_files}"
        number_of_untracked_files=$(wc -l <"${untracked_files}")
        if [[ ${number_of_untracked_files} == 1 ]]; then
            echo -e "\e[33mEs gibt noch eine Datei, die unversioniert ist. Soll diese jetzt hinzugefügt werden?\e[0m"
        else
            echo -e "\e[33mEs gibt noch ${number_of_untracked_files} Dateien, die unversioniert sind. Sollen diese jetzt hinzugefügt werden?\e[0m"
        fi
        sed 's/^/    - /g' "${untracked_files}"
        read -r -e -n1 answer
        if [[ ${answer} =~ ^[YyJj]$ ]]; then
            echo -e "\e[32mDie Dateien werden hinzugefügt\n\e[0m"
            # Nochmal git benutzen um auch Dateien zu unterstützen, die ein Leerzeichen im Namen haben
            git ls-files -z -o --exclude-standard | xargs -0 git add
        fi
        rm -f "${untracked_files}"
    fi

    outputOfGitStatus=$(git status 2>&1)
    if [[ "${outputOfGitStatus}" =~ (deleted|gelöscht|umbenannt|renamed) ]]; then
        echo -e "\e[33mEs gibt noch Dateien, die gelöscht oder umbenannt sind. Sollen diese jetzt bearbeitet werden?\e[0m"
        unmanaged_files=true
        read -r -e -n1 answer
        [[ ${answer} =~ ^[YyJj]$ ]] && return 1
    fi
    cd "${dir_before_changed}" || return 1
    return 0
}

check_for_branch_for_unpushed_commits() {
    if [[ ${branch} == "master" ]]; then
        diffbranch="master"
    else
        if [[ $(git log "origin/${branch}" 2>&1) =~ fatal ]]; then
            diffbranch="master"
        else
            diffbranch="${branch}"
        fi
    fi
}

ask_for_commit_type() {
    # Der Outout wird in eine Datei geschrieben,
    # da wenn alles in eine Variable geschrieben werden würde das folgende echo auch nicht funktionieren würde

    echo -e "\e[1;96mWas für einen Typ soll der Commit haben?\e[0m \n" \
        "\n    0. -\t\t\e[2mKein Committyp\e[0m" \
        "\n    1. INITIAL\t\t\e[2mErster Commit\e[0m" \
        "\n    2. FEAT\t\t\e[2mEin neues Feature für den User\e[0m" \
        "\n    3. ENHANCEMENT\t\e[2mEine kleine Modifikation, die einen Vorteil erbringt\e[0m" \
        "\n    4. FIX\t\t\e[2mBeheben von Bugfixes\e[0m" \
        "\n    5. DOCS\t\t\e[2mUpdate der Dokumentation\e[0m" \
        "\n    6. STYLE\t\t\e[2mÄnderung an der Ausgabe oder dem Erscheinungsbild\e[0m" \
        "\n    7. REFACTOR\t\t\e[2mUmschreiben von Code ohne neue Features\e[0m" \
        "\n    8. TYPO\t\t\e[2mBeheben von Rechtschreibfehlern\e[0m" \
        "\n    9. OTHER\t\t\e[2mAlles andere, u.a. Löschen von Code\e[0m\n"

    read -r -e commit_type_input
    # sed fügt nach jedem Zeichen ein Leerzeichen ein (für for-loop)
    local commit_type_input=$(echo "${commit_type_input}" | sed -e 's/\(.\)/\1 /g' | sed 's/ /\n/g' | sort -u)
    if [[ -z ${commit_type_input} ]]; then # Bei leerem Typ file skippen
        echo "skip" >/tmp/.diffcommit
        return
    elif [[ ${commit_type_input} =~ [Cc] ]]; then # Checkout HEAD
        echo -e "\n\e[33mSollen die Änderungen wirklich zurückgesetzt werden?\e[0m \e[2m(J/N)\e[0m"
        read -r -e -n1 answer
        if [[ ${answer} =~ ^[YyJj]$ ]]; then
            echo -e "\e[33mDie Änderungen werden gelöscht\e[0m"
            git checkout HEAD "${file}" || echo -e "\e[31mEs gab ein Problem beim Zurücksetzten!\e[0m"
            [[ $(file "${file}") == *"CRLF"* ]] && echo && to_lf "${file}"
        else
            echo -e "\e[32mDie Änderungen werden nicht gelöscht\e[0m"
        fi
        echo "checkout" >/tmp/.diffcommit
        return
    elif [[ ${commit_type_input} =~ [Rr] ]]; then # Letzen Commit rückgängig machen
        local commit_message=$(git log -n 1 --pretty="%s")
        local date=$(git log -n 1 --pretty="%ad" --date=format:'%A, den %d.%m.')
        local time=$(git log -n 1 --pretty="%ad" --date=format:'%H:%M:%S')
        local hash=$(git rev-parse --short HEAD)
        echo -e "\e[33mDer letzte Commit wird rückgängig gemacht:\e[0m\n" \
            "    Nachricht: \e[1;96m${commit_message}\e[0m\n        Datum: ${date}\n      Uhrzeit: ${time}\n         Hash: ${hash}"
        git reset --soft HEAD^ || echo -e "\e[31mEs gab ein Problem beim Rückgängig machen des Commits!"
        echo "rückgängig" >/tmp/.diffcommit
        return
    fi
    local amount_of_commit_types=$(echo "${commit_type_input}" | wc -w)
    local commit_type_counter=0
    local commit_type="{"
    for type_input in ${commit_type_input}; do
        ((commit_type_counter++))
        case ${type_input} in
        1) type_input="INITIAL" ;;
        2) type_input="FEAT" ;;
        3) type_input="ENHANCEMENT" ;;
        4) type_input="FIX" ;;
        5) type_input="DOCS" ;;
        6) type_input="STYLE" ;;
        7) type_input="REFACTOR" ;;
        8) type_input="TYPO" ;;
        *)
            commit_type+="OTHER"
            break
            ;;
        esac
        commit_type+=${type_input}
        [[ ${commit_type_counter} != "${amount_of_commit_types}" ]] && commit_type+=" & "
    done
    commit_type+="}"

    if [[ ${commit_type_input} == *"0"* ]]; then
        commit_type=""
        echo -e "--> Kein Committyp\n"
    else
        echo -e "--> ${commit_type}\n"
    fi

    echo "${commit_type}" >/tmp/.diffcommit
}

commitmessageToUpperCase() {

    # Checken, ob das erste Wort diverse Inhalte besitzt
    #   - endet auf "()" --> handelt sich um einen Funktionsnamen
    #   - enthält "://"  --> handelt sich um eine URL
    # In den beiden Fällen solldie Commitnachricht nicht groß geschrieben werden

    local input=${*}
    local first_word=${1}

    if [[ ${first_word} =~ (://|\(\)$) ]]; then
        echo "${input}" # Den Input unverändert zurückgeben
    else
        echo "${input^}" # Erstes Wort groß schreiben
    fi

    return
}

commit_files() {
    # Die Dateien durchgehen und gegebenenfalls committen
    outputOfGitStatus=$(git status 2>&1)
    unset commit_messages
    commit_messages+=("$(git show -s --format=%s)")
    changed=false
    file_counter=1

    for file in ${files}; do # Gehe alle Files durch

        file=${file//\}/ }
        echo -e "\e[1;96m"
        center "Datei: ${file} (${file_counter}/$(echo "${files}" | wc -w))"
        echo -e "\e[0m\n" # Dateinamen mittig und fett anzeigen
        if [[ "$(git diff "${file}" 2>&1)" == *"Permission denied"* && "${file}" != *"diff/function"* ]]; then
            echo -e "\e[31mDie Datei \"${file}\" ist noch in einem anderen Programm geöffnet. Bitte dieses Programm schließen!\e[0m\n"
            ((file_counter++))
            continue
        fi

        git_diff_empty=false
        if [[ -z $(git diff "${file}" 2>/dev/null) ]]; then # Für Dateien, bei denen kein Diff angezeigt werden kann, z.b. .pdf
            git_diff_empty=true
            if [[ -z $(git diff --cached "${file}" 2>/dev/null) ]]; then
                if [[ $(git status | grep "${file}") =~ (neue Datei|new file) ]]; then
                    echo -e "\e[32mFür die Datei \"${file}\" ist kein Diff verfügbar, da sie neu ist\e[0m"
                else
                    echo -e "\e[33mFür die Datei \"${file}\" ist kein Diff verfügbar!\e[0m"
                fi
            fi
        fi

        if [[ "${files_that_need_checkout}" == *"${file}"* ]]; then
            echo -e "\e[33mDiese lokalen Änderungen müssen gelöscht werden, da sonst die Änderungen aus dem Repository nicht" \
                "heruntergeladen werden können\e[0\n"
        fi

        # Änderungen an einem binary file (z.B. jpg oder png) erkennen
        if [[ $(git diff "${file}" 2>/dev/null) == *"Binary file"* && ! ${file} =~ function$ ]]; then
            echo -e "\e[33mEs handelt sich um eine Binärdatei. Die Änderung kann nicht angezeigt werden\e[0m"
        elif [[ -z $(git diff --summary "${file}" 2>/dev/null) ]]; then # Blieben die Rechte der Datei gleich?
            if [[ ${git_diff_empty} == "true" ]]; then
                # Anfang abeschneiden, da der Rechtewechsel auch im diff enthalten ist
                git --no-pager diff --cached --color-words --unified=5 "${file}" 2>/dev/null | tail -n +5
            else
                git --no-pager diff --color-words --unified=5 "${file}" 2>/dev/null | tail -n +5
            fi
        else # Rechteänderungen anzeigen
            echo -ne "\e[33m"
            git diff --summary "${file}" | sed 's/ mode change/Die Rechte der Datei haben sich geändert von/' |
                sed 's/100//g' | sed 's/\=>/auf/' | grep -oE --color=never '.+[0-9]' # Zeigt Rechteänderungen an
            echo -ne "\e[0m"
            if [[ ${git_diff_empty} == "true" ]]; then
                git --no-pager diff --cached --color-words --unified=5 "${file}" 2>/dev/null | tail -n +7
            else
                git --no-pager diff --color-words --unified=5 "${file}" 2>/dev/null | tail -n +7
            fi
        fi

        print_line "-"

        commit_type=""
        if [[ ${HOSTNAME} != "ws-win-00224" || ${PWD} == *"/bashrc"* ]]; then
            ask_for_commit_type
            [[ ${?} == 1 ]] && return
            commit_type=$(cat /tmp/.diffcommit && rm -f /tmp/.diffcommit)
            [[ ${?} == 1 ]] && return
            [[ -n ${commit_type} ]] && commit_type+=" "

            if [[ ${commit_type} == "skip"* ]]; then
                echo -e "\e[33mDer Committyp war leer, somit wird die Datei übersprungen\e[0m"
                ((file_counter++))
                continue
            elif [[ ${commit_type} == "checkout"* ]]; then
                ((file_counter++))
                continue
            elif [[ ${commit_type} == "rückgängig"* ]]; then
                return 1
            fi
        fi

        echo -e "\e[1;96mWie soll die Commitnachricht lauten?\e[0m"
        [[ ${#commit_messages[@]} -gt 1 ]] && echo -e "Die letzten Commitnachrichten:" || echo -e "Die letzten Commitnachricht:"
        commit_counter=0
        for commit in "${commit_messages[@]}"; do
            [[ -n ${commit} ]] && echo -e "    ${commit_counter}      ${commit}"
            ((commit_counter++))
        done
        echo -e "\nAlternativ kann auch folgendes angegeben werden:"
        [[ $(echo "${files}" | wc -w) != 1 || ${unmanaged_files} == true ]] && echo -e "    - A    Alle Dateien committen"
        echo -e "    - C    Die lokalen Änderungen verwerfen"
        [[ -z ${commit_messages[commit_counter]} ]] || echo -e "    - L    Die letzte Commitnachricht verwenden"
        [[ ${changed} == "true" ]] &&
            echo -e "    - R    Letzten Commit rückgängig machen\n    - U    Letzte Comitnachricht umbenennen"
        read -r -e commit_message

        # Bei INITIAL und keiner commit message eine Standardnachricht verwenden
        if [[ ${commit_type} == "{INITIAL}"* && -z ${commit_message} ]]; then
            commit_message="Add $(basename "${file}") to repository"
        fi

        if [[ -z ${commit_message} ]]; then # Keine Nachricht angegeben
            echo -e "\e[33mEs wurde keine Nachricht angegeben, somit die Datei wird übersprungen\e[0m"
            ((file_counter++))
            continue

        elif [[ ${commit_message} =~ ^[0-9]+$ ]]; then                  # Eine Zahl angegeben
            if [[ ${commit_message} -le ${#commit_messages[@]} ]]; then # Gibt es einen Commit, auf den die Zahl trifft?
                local used_commit_message=${commit_messages[commit_message]}
                echo -e "Es wird die Nachricht aus einem vorherigen Commit benutzt: \"${used_commit_message}\""
                eval "git commit ${git_signature_arguments} \"${file}\" -m \"$(escape_quotes "${used_commit_message}")\" >/dev/null" &&
                    git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
                last_commit_message=${used_commit_message}
            else # Sonst verwerfe ihn
                echo -e "\e[33mEs existiert kein Commit zu der angegeben Zahl, somit die Datei wird übersprungen\e[0m"
                ((file_counter++))
                continue
            fi

        elif [[ ${commit_message} =~ ^[Aa]$ ]]; then # Alle Files committen
            echo -e "\n\e[96mWie soll die Commitnachricht für alle Dateien heißen?\e[0m"
            read -r -e answer
            if [[ ${answer} =~ ^.{1,4}$ ]]; then # Die Commitnachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commitnachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                return 1
            fi
            # shellcheck disable=2086
            answer="$(commitmessageToUpperCase ${answer})" # Den ersten Buchstaben der commit_message groß schreiben
            git add .
            eval "git commit ${git_signature_arguments} -a -m \"$(escape_quotes "${commit_type}${answer}")\" >/dev/null" &&
                git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
            changed=true
            break 2

        elif [[ ${commit_message} =~ ^[Cc]$ ]]; then # Checkout HEAD
            echo -e "\n\e[33mSollen die Änderungen wirklich zurückgesetzt werden?\e[0m \e[2m(J/N)\e[0m"
            read -r -e -n1 answer
            if [[ ${answer} =~ ^[YyJj]$ ]]; then
                echo -e "\e[33mDie Änderungen werden gelöscht\e[0m"
                git checkout HEAD "${file}" || echo -e "\e[31mEs gab ein Problem beim Zurücksetzten!\e[0m"
                [[ $(file "${file}") == *"CRLF"* ]] && echo && to_lf "${file}"
            else
                echo -e "\e[32mDie Änderungen werden nicht gelöscht\e[0m"
            fi
            ((file_counter++))
            continue

        elif [[ ${commit_message} =~ ^[Ll]$ ]]; then    # Der letzte Commit soll verwendet werden
            if [[ ${last_commit_message} == "" ]]; then # Gibt es einen letzten Commit?
                echo -e "\e[33mEs gibt keine letzte Commitnachricht, somit die Datei wird übersprungen\e[0m"
                ((file_counter++))
                continue
            fi
            echo "Die letzte Commitnachricht wird verwendet"
            eval "git commit ${git_signature_arguments} \"${file}\" -m \"$(escape_quotes "${last_commit_message}")\" >/dev/null" &&
                git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"

        elif [[ ${commit_message} =~ ^[Uu]$ ]]; then # Letze Commitnachricht umbenennen
            echo -e "\n\e[96mWie soll die neue Commtnachricht heißen?\e[0m"
            read -r -e answer
            if [[ ${answer} =~ ^.{1,4}$ ]]; then # Die Commitnachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commitnachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                return 1
            fi
            # shellcheck disable=2086
            answer="$(commitmessageToUpperCase ${answer})"                    # Den ersten Buchstaben der commit_message groß schreiben
            commit_messages[${#commit_messages[@]}]="${commit_type}${answer}" # Die neue Nachricht überschreibt die alte
            last_commit_message="${commit_type}""${commit_message}"
            eval "git commit ${git_signature_arguments} --amend -m \"$(escape_quotes "${last_commit_message}")\" >/dev/null" &&
                git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
            return 1

        elif [[ ${commit_message} =~ ^[Rr]$ ]]; then # Letzten Commit rückgängig machen
            local commit_message=$(git log -n 1 --pretty="%s")
            local date=$(git log -n 1 --pretty="%ad" --date=format:'%A, den %d.%m.')
            local time=$(git log -n 1 --pretty="%ad" --date=format:'%H:%M:%S')
            local hash=$(git rev-parse --short HEAD)
            echo -e "\e[33mDer letzte Commit wird rückgängig gemacht:\e[0m\n" \
                "    Nachricht: \e[1;96m${commit_message}\e[0m\n        Datum: ${date}\n      Uhrzeit: ${time}\n         Hash: ${hash}"
            git reset --soft HEAD^ || echo -e "\e[31mEs gab ein Problem beim Rückgängig machen des Commits!"
            return 1

        elif [[ ${commit_message} =~ ^.{1,4}$ ]]; then # Die Commitnachricht ist kürzer als 5 Zeichen
            echo -e "\e[33mDie Commitnachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
            ((file_counter++))
            continue

        else # Commit mit dem angegeben Text
            # shellcheck disable=2086
            commit_message="$(commitmessageToUpperCase ${commit_message})"
            commit_messages[$((${#commit_messages[@]} + 1))]="${commit_type}${commit_message}"
            last_commit_message="${commit_type}${commit_message}"
            eval "git commit ${git_signature_arguments} \"${file}\" -m \"$(escape_quotes "${last_commit_message}")\" >/dev/null" &&
                git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
        fi

        ((file_counter++))
        changed=true
    done

    unset commit_messages # Das Array mit den Commitnachrichten wieder leeren

    # Prüfen, ob Commits angegeben wurden
    if [ "${changed}" = false ]; then
        echo -e "\e[1;96m"
        center "Keine Änderungen"
        echo -e "\n\e[0m"
        echo -e "\e[31mEs wurden keine neuen Commits angegeben\e[0m"
    fi
}

push() {
    # Hier geht es drum alle Änderungen zu pushen
    pushed=false
    while [ ${pushed} == "false" ]; do
        read -r -e -n1 answer
        echo ""
        if [[ ${answer} =~ ^[Uu]$ ]]; then
            echo -e "\n\e[96mWie soll die neue Commtnachricht heißen?\e[0m"
            read -r -e answer
            if [[ ${answer} =~ ^.{1,4}$ ]]; then # Die Commitnachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commitnachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                continue
            fi
            # Bei INITIAL und keiner commit message eine Standardnachricht verwenden
            if [[ ${commit_type} == "{INITIAL}"* && -z ${answer} ]]; then
                answer="Add $(basename "${file}") to repository"
            fi
            # shellcheck disable=2086
            answer="$(commitmessageToUpperCase ${answer})" # Den ersten Buchstaben der commit_message groß schreiben
            eval "git commit ${git_signature_arguments} --amend -m \"$(escape_quotes "${commit_type}${answer}")\" >/dev/null" &&
                git_history -u "$(git rev-parse HEAD)" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
            echo -e "\n\e[32mSollen die Änderungen nun gepusht werden?\e[0m"
            git --no-pager log "origin/${diffbranch}..HEAD" --pretty="| %h | %s" --reverse | nl

        elif [[ ${answer} =~ ^[Rr]$ ]]; then # Letzten Commit rückgängig machen
            local commit_message=$(git log -n 1 --pretty="%s")
            local date=$(git log -n 1 --pretty="%ad" --date=format:'%A, den %d.%m.')
            local time=$(git log -n 1 --pretty="%ad" --date=format:'%H:%M:%S')
            local hash=$(git rev-parse --short HEAD)
            echo -e "\e[33mDer letzte Commit wird rückgängig gemacht:\e[0m\n" \
                "    Nachricht: \e[1;96m${commit_message}\e[0m\n        Datum: ${date}\n      Uhrzeit: ${time}\n         Hash: ${hash}"
            git reset --soft HEAD^ || echo -e "\e[31mEs gab ein Problem beim Rückgängig machen des Commits!"
            return

        elif [[ ${answer} =~ ^[YyJj]$ ]]; then
            pushed=true
            output=$(git push 2>&1)
            # shellcheck disable=2181
            if [[ ${?} == 0 ]]; then
                if [[ ${output} == *"up-to-date"* ]]; then
                    echo -e "\e[33mAlle aktuellen Commits wurden schon hochgeladen. \e[32mJetzt ist alles aktuell\e[0m"
                else
                    echo -e "\e[32mDie Änderungen wurden hochgeladen\e[0m"
                    if [[ ${output} == *"merge_request"* ]]; then # GitLab: Merge Request
                        echo -e "\e[1;96m"
                        center "Merge Request"
                        echo -e "\n\e[0m"
                        echo -ne "\e[32mEine Merge Request kann hier erstellt werden: \e[0m"
                        echo "${output}" | grep -o "https:\/\/.*merge_request.*" | cut -d " " -f1
                    elif [[ ${output} == *"/pull/new/"* ]]; then # GitHub: Pull Request
                        echo -e "\e[1;96m"
                        center "Pull Request"
                        echo -e "\n\e[0m"
                        echo -ne "\e[32mEine Pull Request kann hier erstellt werden: \e[0m"
                        echo "${output}" | grep -o "https:\/\/.*\/pull\/new\/.*" | cut -d " " -f1
                    fi
                fi
            elif [[ ${output} == *"git pull"* ]]; then
                echo -e "\n\e[33mDie Änderungen des Repositories müssen erst heruntergeladen werden\e[0m"
                git pull --rebase 2>/dev/null >/dev/null
                git push
                echo -e "\e[32mDie Änderungen wurden hochgeladen\e[0m"
            elif [[ ${output} == *"--set-upstream"* ]]; then
                echo -e "\e[33mDer Upsteam musste erst gesetzt werden\e[0m"
                local upsteam_set_command=$(git push 2>&1 | grep "git push")
                # shellcheck disable=2086
                output=$(eval ${upsteam_set_command} 2>&1)

                if [[ ${output} == *"merge_request"* ]]; then # GitLab: Merge Request
                    echo -e "\e[1;96m"
                    center "Merge Request"
                    echo -e "\n\n\e[0;32mDie Änderungen wurden hochgeladen\e[0m"
                    echo -ne "\e[32mEine Merge Request kann hier erstellt werden: \e[0m"
                    echo "${output}" | grep -o "https:\/\/.*merge_request.*" | cut -d " " -f1
                elif [[ ${output} == *"/pull/new/"* ]]; then # GitHub: Pull Request
                    echo -e "\e[1;96m"
                    center "Pull Request"
                    echo -e "\n\n\e[0;32mDie Änderungen wurden hochgeladen\e[0m"
                    echo -ne "\e[32mEine Pull Request kann hier erstellt werden: \e[0m"
                    echo "${output}" | grep -o "https:\/\/.*\/pull\/new\/.*" | cut -d " " -f1
                fi
            else
                echo -e "\e[31mEs gab ein Problem beim Hochladen!\e[0m"
            fi
        else
            pushed=true
            echo -e "\e[33mDie Änderungen werden nicht hochgeladen\e[0m"
        fi
    done
}

pull() {
    # Prüfen, ob es Änderungen gibt, die noch gepullt werden müssen
    local last_pull=$(git_last_pull)

    # Nur pull diff mit "force" aufgerufen wurde soll auf Commits geprüft werden, sonst nicht, da es zu lange dauert
    [[ ${1} == "force" ]] && local fetch_result=$(git fetch 2>&1)
    if [[ "${fetch_result}" == *"unable to access 'https://"* ]]; then
        echo -e "\e[31mEs konnte keine Verbindung über HTTPS zum GIT-Server aufgebaut werden!\n\e[0m"
        return 1
    elif [[ "${fetch_result}" == *"Connection refused"* ]]; then
        echo -e "\e[31mEs konnte keine Verbindung über SSH zum GIT-Server aufgebaut werden!\n\e[0m"
        return 1
    fi

    outputOfGitStatus=$(git status 2>&1)

    if [[ ! "${outputOfGitStatus}" =~ (Commit hinter|Commits hinter|behind) ]]; then
        [[ ${1} == "force" ]] &&
            echo -e "\e[32mEs gibt keine Änderungen, die noch heruntergeladen werden müssen\n\e[0m    --> ${last_pull}\n"
        return
    fi

    amount=$(git status | sed '2!d' | sed 's/[^0-9]*//g')

    if [[ ${amount} == 1 ]]; then
        echo -e "\e[33mEs gibt noch einen Commit, der noch nicht heruntergeladen wurde. Soll er jetzt heruntergeladen werden?\e[0m"
    else
        echo -e "\e[33mEs gibt noch ${amount} Commits, die noch nicht heruntergerladen wurden." \
            "Sollen sie jetzt heruntergeladen werden?\e[0m"
    fi

    git_log "${amount}" "..origin/${branch}"

    echo -e "\n${last_pull}"

    read -r -e -n1 answer

    if [[ ! ${answer} =~ ^[YyJj]$ ]]; then
        echo -e "\e[33mDie Änderungen werden nicht heruntergeladen\n\e[0m"
        return
    fi

    local pull_result="$(git pull --rebase 2>&1)"
    local return_code=${?}
    if [[ "${pull_result}" == *"stash"* ]]; then
        echo -e "\e[31mDie lokalen Änderungen müssen erst commited werden before die Änderungen aus dem Repository heruntergeladen" \
            "werden können! \e[0m"
        echo -e "Dateien, die überschrieben werden würden:"
        git pull 2>&1 | sed 's/://' | sed 's/ /\n/g' | sed -n '/:/,/Please/{/:/b;/Please/b;p}' |
            sed -e 's/^[[:space:]]*/ - /' | tee /tmp/.files_that_need_checkout
        files_that_need_checkout=$(cat /tmp/.files_that_need_checkout)
        rm /tmp/.files_that_need_checkout
        echo -ne "\e[33m"
        print_line "="
        echo -ne "\e[0m"
    elif [[ ${return_code} == 0 ]]; then
        echo -e "\e[32mDie Änderungen wurden heruntergeladen\n\e[0m"
    else
        echo -e "\e[31mEs gab ein Problem beim Herunterladen!\n\e[0m"
        return 1
    fi

    return
}

diff_function() {

    # shellcheck disable=2164
    [[ ${1} == "diff" ]] && cd "$(dirname "$(readlink -f "${BASH_SOURCE[@]}")")/../../"

    outputOfGitStatus=$(git status 2>&1)

    if ! check_if_git_repo_exists; then return; fi

    branch=$(git rev-parse --abbrev-ref HEAD 2>&1)
    check_for_branch_for_unpushed_commits # Prüft welcher Branch verwendet werden soll für den Check für ungepushte Commits

    if ! check_for_unmanaged_files; then git status && return; fi

    if ! check_for_root_user; then
        # Prüfen, ob der Nutzer aktuell root ist, da root sehr wahrscheinlich nicht das git-Repository gehört
        echo -e "\e[31mAchtung! Aktueller Nutzer: ${USER}"
        return 1
    fi

    if [[ "$1" =~ ^(p|pull|diff)$ ]]; then
        pull "force"
        shift
    else
        pull
    fi

    if [[ -n "$1" ]]; then
        # Dateien prüfen, die als Argument übergeben wurden
        local files_changed=$(git status)
        local files=$(echo "$@" | sed 's/ /\n/g' | uniq)
        files_to_commit=""

        for file in ${files}; do
            if [[ ! -f ${file} ]]; then
                echo -e "\e[31mDie Datei \"${file}\" existiert nicht - Sie wird übersprungen\e[0m"
                continue
            elif echo "${files_changed}" | grep -q "${file}"; then
                files_to_commit+=" ${file}"
                continue
            else
                echo -e "\e[33mDie Datei \"${file}\" wurde nicht modifiziert - Sie wird übersprungen\e[0m"
            fi
        done

        files=${files_to_commit}
    else
        # Veränderte Files finden und je nach Anzahl verschiedene Verhalten starten
        # Erkennt keine Umbenennungen
        files=$(git status | grep "geändert\|modified\|neue Datei\|new file" | cut -d ":" -f2- | sed 's/^ *//g' | sed 's/ /}/g' | sort -u)

        case $(echo "${files}" | wc -w) in
        0) # Es wurden keine Dateien verändert; gibt es noch Commits, die nicht hochgeladen wurden?
            echo -e "\e[32mEs wurden keine Dateien modifiziert\e[0m"
            amount=$(git --no-pager log "origin/${diffbranch}..HEAD" --pretty="%h" | wc -l) # Zählt ungepushte Commits
            if [[ ${amount} == 0 ]]; then
                return
            fi
            echo -e "\e[1;96m"
            center "Push"
            echo -e "\n\e[0m"
            if [[ ${amount} == 1 ]]; then
                echo -e "\e[33mEs gibt noch einen Commit, der noch nicht hochgeladen wurde. Soll er jetzt hochgeladen werden?\e[0m"
                git --no-pager log "origin/${diffbranch}..HEAD" --pretty="    %h | %s"
            else
                # Alle minus die nicht doppelten
                number_of_duplicates=$(git --no-pager log "origin/${diffbranch}..HEAD" --pretty="%s" | awk '!x[$0]++' | wc -l) >/dev/null
                number_of_uniques=$((amount - number_of_duplicates)) >/dev/null
                if [[ ${number_of_uniques} == 0 ]]; then
                    echo -ne "\e[33mEs gibt noch ${amount} Commits, die noch nicht hochgeladen wurden."
                elif [[ ${number_of_uniques} == 1 ]]; then
                    echo -ne "\e[33mEs gibt noch ${amount} Commits (1 doppelter), die noch nicht hochgeladen wurden."
                else
                    echo -ne "\e[33mEs gibt noch ${amount} Commits (${number_of_uniques} doppelte), die noch nicht hochgeladen wurden."
                fi
                echo -e " Sollen sie jetzt hochgeladen werden?\e[0m"
                git --no-pager log "origin/${diffbranch}..HEAD" --pretty="| %h | %s" --reverse | nl
            fi
            push
            return
            ;;
        1) echo -e "\e[1;96mEs wurde eine Datei modifiziert\e[0m" ;;
        *) echo -e "\e[1;96mEs wurden $(echo "${files}" | wc -w) Dateien modifiziert\e[0m" ;;
        esac

        local longest_filename=0
        # Längsten Dateinamen herausfinden
        changed_filenames=$(git status | grep "geändert\|modified\|neue Datei\|new file" |
            cut -d ":" -f2- | sed 's/^ *//g' | sed 's/ /{/g' | sort -u)
        for filename in ${changed_filenames}; do
            [[ ${#filename} -gt ${longest_filename} ]] && longest_filename=${#filename}
        done

        # Am Anfang alle Dateien auflisten, die bearbeitet wurden
        for filename in ${changed_filenames}; do
            filename=${filename//\{/ }
            local filename_length=${#filename}
            echo -ne " - ${filename}"
            local amount_of_spaces=$((longest_filename - filename_length))
            for ((i = 0; i <= amount_of_spaces; ++i)); do echo -n " "; done
            # 2>/dev/null um (CR)LF Warnung auszublenden
            local changed=$(git diff --stat "${filename}" 2>/dev/null | cut -d "|" -f2- | head -n 1)
            [[ -z ${changed} ]] && changed=$(git diff --stat --staged "${filename}" 2>/dev/null | cut -d "|" -f2- | head -n 1)
            echo -e "| $(echo "${changed}" | sed 's/+/\\e[32m+\\e[0m/g' | sed 's/-/\\e[31m-\\e[0m/g')"
        done

    fi

    if ! commit_files; then return; fi

    outputOfGitStatus=$(git status 2>&1)

    if [[ "${outputOfGitStatus}" =~ (Commit vor |Commits vor| ahead) || ${changed} = true ]]; then
        echo -e "\e[1;96m"
        center "Push"
        echo -e "\n\e[0m"

        # Doppelte Commits sollen nicht doppelt gerechnet werden
        if [[ $(git --no-pager log "origin/${diffbranch}..HEAD" --pretty="%s" | awk '!x[$0]++' | wc -l) == 1 ]]; then
            echo -e "\e[32mSoll die Änderung gepusht werden?\e[0m"
            git --no-pager log "origin/${diffbranch}..HEAD" --pretty="    %h | %s"
        else
            echo -e "\e[32mSollen die Änderungen gepusht werden?\e[0m"
            git --no-pager log "origin/${diffbranch}..HEAD" --pretty="| %h | %s" --reverse | nl
        fi
        push
    fi

    return 0

}

complete -F _longopt -W "diff pull" diff
