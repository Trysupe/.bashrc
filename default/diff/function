#!/bin/bash


alias diff='diff_function'


check_if_repo_exists(){
    #Prüfen, ob ein GIT Repo gefunden wurde
    if [[ "$git_status" == *"Kein Git-Repo"* || "$git_status" == *"not a git repository"* ]]; then
        echo -e "\e[31mEs wurde kein GIT Repository gefunden\e[0m"
        return 1
    fi
}


check_for_unmanaged_files(){
    #Prüfen, ob es noch gelöschte, neue oder unversionierte Dateien gibt, diese erst direkt in der Shell bearbeitet werden sollen
    if [[ "$git_status" =~ (Untracked file|deleted|Unversioniert|gelöscht|umbenannt|renamed) ]]; then
        echo -e "\e[33mEs gibt noch Dateien, die gelöscht oder unversioniert sind. Sollen diese jetzt bearbeitet werden?\e[0m"
        unmanaged_files=true
        read -e answer
        [[ $answer =~ ^[YyJj]$ ]] && return 1
    fi
    return 0
}


commit_files(){
    #Die Dateien durchgehen und gegebenenfalls committen
    git_status=$(git status 2>&1)
    unset commit_messages
    changed=false
    file_counter=1

    for file in $files; do #Gehe alle Files durch

        file=$(echo $file | sed 's/}/ /g')
        echo -e "\e[1;96m"; center "Datei: $file ($file_counter/$(echo $files | wc -w))"; echo -e "\e[0m\n" #Dateinamen mittig und fett anzeigen
        if [[ "$(git diff "$file" 2>&1)" == *"Permission denied"* && "$file" != *"diff/function"* ]]; then
            echo -e "\e[31mDie Datei \"$file\" ist noch in einem anderen Programm geöffnet. Bitte dieses Programm zuerst schließen!\e[0m\n"
            ((file_counter ++))
            continue
        fi

        git_diff_empty=false
        if [[ -z $( git diff "$file" ) ]]; then #Für Dateien, bei denen kein Diff angezeigt werden kann, z.b. .pdf
            local git_diff_empty=true
            if [[ -z $(git diff --cached "$file" ) ]]; then
                if [[ $(git status | grep "$file") =~ (neue Datei|new file) ]]; then
                    echo -e "\e[32mFür die Datei \"$file\" ist kein Diff verfügbar, da sie neu ist\e[0m"
                else
                    echo -e "\e[33mFür die Datei \"$file\" ist kein Diff verfügbar!\e[0m"
                fi
            fi
        fi

        if [[ "$files_that_need_checkout" == *"$file"* ]]; then
            echo -e "\e[33mDiese lokalen Änderungen müssen gelöscht werden, da sonst die Änderungen aus dem Repository nicht heruntergeladen werden können\e[0\n"
        else
            echo ""
        fi

        if [[ -z $(git diff --summary "$file") ]]; then #Blieben die Rechte der Datei gleich?
            if [[ $git_diff_empty == "true" ]]; then
                git --no-pager diff --cached --color=always --unified=5 "$file" | tail -n +5 #Mehr Abschneiden, da der Rechtewechsel auch im diff enthalten ist
            else
                git --no-pager diff --color=always --unified=5 "$file" | tail -n +5 #Mehr Abschneiden, da der Rechtewechsel auch im diff enthalten ist
            fi
        else #Rechteänderungen anzeigen
            echo -ne "\e[33m"
            git diff --summary "$file" | sed 's/ mode change/Die Rechte der Datei haben sich geändert von/' | sed 's/100//g' | sed 's/\=>/auf/' | grep -oE --color=never '.+[0-9]' #Zeigt Rechteänderungen an
            echo -e "\e[0m"
            echo $git_diff_empty
            if [[ $git_diff_empty == "true" ]]; then
                git --no-pager diff --cached --color=always --unified=5 "$file" | tail -n +7 #Mehr Abschneiden, da der Rechtewechsel auch im diff enthalten ist
            else
                git --no-pager diff --color=always --unified=5 "$file" | tail -n +7 #Mehr Abschneiden, da der Rechtewechsel auch im diff enthalten ist
            fi
        fi

        print_line "-"

        echo -e "\e[1;96mWie soll die Commit-Nachricht lauten?\e[0m"
        [[ ${#commit_messages[@]} != 0 ]] && echo -e "Die letzten Commit Nachrichten: \e[2m(Um eine davon zu benutzen, die entsprechende Zahl angeben)\e[0m" #Wenn es vorherige Commits gibt werden diese nun angezeigt
        commit_counter=0
        for commit in ${commit_messages[@]} ; do
            (( commit_counter ++ ))
            [[ -z ${commit_messages[commit_counter]} ]] || echo -e "    $commit_counter      ${commit_messages[commit_counter]}"
        done
        echo -e "\nAlternativ kann auch folgendes angegeben werden:"
        [[ $(echo $files | wc -w) != 1 || $unmanaged_files == true ]] && echo -e "    - A     Alle Dateien committen"
        echo -e "    - CO    Die lokalen Änderungen verwerfen"\
        "\n    - L     Die letzte Commitnachricht verwenden"\
        "\n    - S     Stop"
        [[ $changed == "true" ]] && echo -e "    - U     Letzte Comitnachricht umbenennen"
        echo -e "\e[1;30mDie Datei wird übersprungen, wenn nichts angegeben wird\n\e[0m"
        read -e commit_message


        if [[ -z $commit_message ]]; then #Keine Nachricht angegeben
            echo -e "\e[33mEs wurde keine Nachricht angegeben, somit die Datei wird übersprungen\e[0m"
            ((file_counter ++))
            continue

        elif [[ $commit_message =~ ^[0-9]+$ ]]; then #Eine Zahl angegeben
            if [[ ${commit_messages[commit_message]} != "0" ]]; then #Gibt es einen Commit, auf den die Zahl trifft? Wenn ja, benutze ihn
                echo -e "Es wird die Nachricht aus einem vorherigen Commit benutzt: \"${commit_messages[commit_message]}\""
                git commit -s "$file" -m "${commit_messages[commit_message]}" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
                last_commit_message=${commit_messages[commit_message]}
            else #Sonst verwerfe ihn
                echo -e "\e[33mEs wurde keine Nachricht angegeben, somit die Datei wird übersprungen\e[0m"
		        ((file_counter ++))
                continue
            fi

        elif [[ $commit_message =~ ^[Aa]$ ]]; then #Alle Files committen
            echo -e "\n\e[96mWie soll die Commtnachricht für alle Dateien heißen?\e[0m \e[2m(\"S\" zum Abbrechen)\e[0m"
            read -e answer
            if [[ $answer =~ ^[Ss]$ ]]; then #Stop(Abbrechen)
                echo -e "\e[31mStop\e[0m"
                return 1
            elif [[ $answer =~ ^.{1,4}$ ]]; then #Die Commit Nachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commit-Nachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                return 1
            fi
            git commit -a -s -m "$answer"
            changed=true
            break 2

        elif [[ $commit_message =~ ^(co|Co|cO|CO)$ ]]; then #Cechkout HEAD
            echo -e "\n\e[33mSollen die Änderungen wirklich zurückgesetzt werden?\e[0m \e[2m(J/N)\e[0m"
            read -e answer
            if [[ $answer =~ ^[YyJj]$ ]]; then
                echo -e "\e[33mDie Änderungen werden gelöscht\e[0m"
                git checkout HEAD "$file" || echo -e "\e[31mEs gab ein Problem beim Zurücksetzten!\e[0m"
                [[ $(file $file) == *"CRLF"* ]] && echo && to_lf "$file"
            else
                echo -e "\e[32mDie Änderungen werden nicht gelöscht\e[0m"
            fi
            ((file_counter ++))
            continue

        elif [[ $commit_message =~ ^[Ll]$ ]]; then #Der letzte Commit soll verwendet werden
            if [[ $last_commit_message == "" ]]; then #Gibt es einen letzten Commit?
                echo -e "\e[33mEs gibt keine letzte Commitnachricht, somit die Datei wird übersprungen\e[0m"
		        ((file_counter ++))
                continue
            fi
            echo "Die letzte Commit-Nachricht wird verwendet"
            git commit -s "$file" -m "$last_commit_message" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"

        elif [[ $commit_message =~ ^[Ss]$ ]]; then #Stop(Abbrechen)
            echo -e "\e[31mStop\e[0m"
            return 1

        elif [[ $commit_message =~ ^[Uu]$ ]]; then #Letze Commitnachricht umbenennen
            echo -e "\n\e[96mWie soll die neue Commtnachricht heißen?\e[0m \e[2m(\"S\" zum Abbrechen)\e[0m"
            read -e answer
            if [[ $answer =~ ^[Ss]$ ]]; then #Stop(Abbrechen)
                echo -e "\e[31mStop\e[0m"
                return 1
            elif [[ $answer =~ ^.{1,4}$ ]]; then #Die Commit Nachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commit-Nachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                return 1
            fi
            commit_messages[${#commit_messages[@]}]="$answer" #Die neue Nachricht überschreibt die alte
            git commit --amend -s -m "$answer"
            return 1

        elif [[ $commit_message =~ ^.{1,4}$ ]]; then #Die Commit Nachricht ist kürzer als 5 Zeichen
            echo -e "\e[33mDie Commit-Nachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
            ((file_counter ++))
            continue

        else #Commit mit dem angegeben Text
            commit_messages[$((${#commit_messages[@]} + 1 ))]="$commit_message" #Den aktuellen Commit ins Array packen
            last_commit_message=$commit_message
	        git commit -s "$file" -m "$commit_message" || echo -e "\e[31mEs gab ein Problem beim Commit!\e[0m"
        fi


        ((file_counter ++))
        changed=true
    done


    unset commit_messages #Das Array mit den Commitnachrichten wieder leeren


    #Prüfen, ob Commits angegeben wurden
    if [ "$changed" = false ]; then
        echo -e "\e[1;96m"; center "Keine Änderungen"; echo -e "\n\e[0m"
        echo -e "\e[31mEs wurden keine neuen Commits angegeben\e[0m"
    fi
}


push(){
    #Hier geht es drum alle Änderungen zu pushen
    pushed=false
    while [ $pushed == "false" ]; do
        read -e answer
        echo ""
        if [[ $answer =~ ^[Uu]$ ]]; then
            echo -e "\n\e[96mWie soll die neue Commtnachricht heißen?\e[0m \e[2m(\"S\" zum Abbrechen)\e[0m"
            read -e answer
            if [[ $answer =~ ^[Ss]$ ]]; then #Stop(Abbrechen)
                echo -e "\e[31mStop\e[0m"
                continue
            elif [[ $answer =~ ^.{1,4}$ ]]; then #Die Commit Nachricht ist kürzer als 5 Zeichen
                echo -e "\e[33mDie Commit-Nachricht war zu kurz. Sie muss mindestens fünf Zeichen haben\e[0m"
                continue
            fi
            git commit --amend -s -m "$answer"
            echo -e "\n\e[32mSollen die Änderungen nun gepusht werden?\e[0m \e[2m(\"U\" zum erneuten Umbenennen des letzten Commits)\e[0m"
            git log origin/$branch..$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | awk '!x[$0]++' | nl
            continue
        elif [[ $answer =~ ^[YyJj]$ ]]; then
            pushed=true
            output=$(git push 2>&1)
            if [[ $? == 0 ]]; then
                if [[ $output == *"up-to-date"* ]]; then
                    echo -e "\e[33mAlle aktuellen Commits wurden schon hochgeladen. \e[32mJetzt ist alles aktuell\e[0m"
                else
                    echo -e "\e[32mDie Änderungen wurden hochgeladen\e[0m"
                fi
            elif [[ $output == *"git pull"* ]]; then
                echo -e "\n\e[33mDie Änderungen des Repositories müssen erst heruntergeladen werden\e[0m"
                git pull --rebase 2>/dev/null >/dev/null
                git push
                echo -e "\e[32mDie Änderungen wurden hochgeladen\e[0m"
            elif [[ $output == *"--set-upstream"* ]]; then
                echo -e "\e[33mDer Upsteam musste erst gesetzt werden\e[0m"
                $(git push 2>&1 | grep "git push")
            else
                echo -e "\e[31mEs gab ein Problem beim Hochladen!\e[0m"
            fi
        else
            pushed=true
            echo -e "\e[33mDie Änderungen werden nicht hochgeladen\e[0m"
        fi
    done
}


pull(){
    #Prüfen, ob es Änderungen gibt, die noch gepullt werden müssen
    [[ $1 == "force" ]] && git remote update >/dev/null 2>/dev/null #Nur Wenn diff mit "force" gestartet wurde soll auf Commits geprüft werden, sonst nicht, da es zu lange dauert
    git_status=$(git status 2>&1)

    if [[ "$git_status" =~ (Commit hinter|Commits hinter|behind) ]]; then
	    amount=$(git status | sed '2!d' | sed 's/[^0-9]*//g')

        if [[ $amount == 1 ]]; then
            echo -e "\e[33mEs gibt noch einen Commit, der noch nicht heruntergeladen wurde. Soll er jetzt heruntergeladen werden?\e[0m"
        else
	        echo -e "\e[33mEs gibt noch $amount Commits, die noch nicht heruntergerladen wurden. Sollen sie jetzt heruntergeladen werden?\e[0m"
        fi
        git log ..origin/$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | sed -e 's/^[[:space:]]*/ - /'
        read -e answer

        if [[ $answer =~ ^[YyJj]$ ]]; then
            local pull_result="$(git pull --rebase 2>&1)"
            local return_code=$?
            if [[ "$pull_result" == *"stash"* ]]; then
                echo -ne "\e[31mDie lokalen Änderungen müssen erst commited werden before die Änderungen aus dem Repository heruntergeladen werden können! \e[0m"
                echo -e "Dateien, die überschrieben werden würden:"
                git pull 2>&1 | sed 's/://' | sed 's/ /\n/g' | sed -n '/:/,/Please/{/:/b;/Please/b;p}' | sed -e 's/^[[:space:]]*/ - /' | tee /tmp/files_that_need_checkout
                files_that_need_checkout=$(cat /tmp/files_that_need_checkout)
                rm /tmp/files_that_need_checkout

                echo -ne "\e[33m"; print_line "="; echo -ne "\e[0m"

            elif [[ $return_code == 0 ]]; then
                echo -e "\e[32mDie Änderungen wurden heruntergeladen\n\e[0m"
            else
                echo -e "\e[31mEs gab ein Problem beim Herunterladen!\n\e[0m"
                return 1
            fi
        else
            echo -e "\e[33mDie Änderungen werden nicht heruntergeladen\n\e[0m"
        fi
    fi
    return
}


diff_function(){

    [[ ${1} == "diff" ]] && cd "$(dirname "$(readlink -f "$BASH_SOURCE")")/../../"

    git_status=$(git status 2>&1)

    if ! check_if_repo_exists; then return; fi

    branch=$(git branch | grep "*" | cut -d" " -f2-)

    if ! check_for_unmanaged_files; then git status && return; fi


    if [[ "$1" =~ ^(p|pull|diff)$ ]]; then
        if ! pull "force"; then return; fi
        shift
    else
        if ! pull; then return; fi
    fi

    if [[ -n "$1" ]]; then
        #Dateien prüfen, die als Argument übergeben wurden
        local files_changed=$(git status)
        local files=$(echo "$@" | sed 's/ /\n/g' | uniq)
        files_to_commit=""

        for file in $files; do
            if [[ ! -f $file ]]; then
                echo -e "\e[31mDie Datei \"$file\" existiert nicht - Sie wird übersprungen\e[0m"
                continue
            elif [[ -n $(echo $files_changed | grep $file) ]]; then
                files_to_commit+=" ""$file"
                continue
            else
                echo -e "\e[33mDie Datei \"$file\" wurde nicht modifiziert - Sie wird übersprungen\e[0m"
            fi
        done

        files=$files_to_commit
    else
        #Veränderte Files finden und je nach Anzahl verschiedene Verhalten starten
        files=$(git status | grep "geändert\|modified\|neue Datei\|new file" | cut -d ":" -f2- | sed 's/^ *//g' | sed 's/ /}/g') #umbenannt geht nicht

        case $(echo $files | wc -w ) in
            0) #Es wurden keine Dateien verändert; gibt es noch Commits, die nicht hochgeladen wurden?
                echo -e "\e[32mEs wurden keine Dateien modifiziert\e[0m"
                if [[ "$git_status" =~ (Commit vor |Commits vor | ahead) ]]; then
                    echo -e "\e[1;96m"; center "Push"; echo -e "\n\e[0m"
                    amount=$(git status | sed '2!d' | sed 's/[^0-9]*//g')
                    if [[ -z $amount ]]; then
                        echo -ne "\e[33mEs gibt noch Commits, die noch nicht hochgeladen wurden. Sollen sie jetzt hochgeladen werden?\e[0m"
                    elif [[ $amount == 1 ]]; then
                        echo -e "\e[33mEs gibt noch einen Commit, der noch nicht hochgeladen wurde. Soll er jetzt hochgeladen werden?\e[0m \e[2m(\"U\" zum Umbenennen des letzten Commits)\e[0m"
                        git log origin/$branch..$branch | sed -n 5p
                    else
                        number_of_duplicates=$(( $amount - $(git log origin/$branch..$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | awk '!x[$0]++' | wc -l) )) >/dev/null #Alle minus die nicht doppelten
                        if [[ $number_of_duplicates == 0 ]]; then
                            echo -ne "\e[33mEs gibt noch $amount Commits, die noch nicht hochgeladen wurden. Sollen sie jetzt hochgeladen werden?\e[0m"
                        elif [[ $number_of_duplicates == 1 ]]; then
                            echo -ne "\e[33mEs gibt noch $amount Commits (1 doppelter), die noch nicht hochgeladen wurden. Sollen sie jetzt hochgeladen werden?\e[0m"
                        else
                            echo -ne "\e[33mEs gibt noch $amount Commits ($number_of_duplicates doppelte), die noch nicht hochgeladen wurden. Sollen sie jetzt hochgeladen werden?\e[0m"
                        fi
                        echo -e "\e[2m (\"U\" zum Umbenennen des letzten Commits)\e[0m"
                        git log origin/$branch..$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | awk '!x[$0]++' | nl
                    fi
                    push
                    return
                fi
                return;;
            1) echo -e "\e[1;96mEs wurde eine Datei modifiziert\e[0m";;
            *) echo -e "\e[1;96mEs wurden $(echo $files | wc -w ) Dateien modifiziert\e[0m";;
        esac

        git status | grep "geändert\|modified\|neue Datei\|new file" | cut -d ":" -f2- | sed 's/^ */ - /g' #Am Anfang alle Dateien auflisten, die bearbeitet wurden
    fi


    if ! commit_files; then return; fi


    git_status=$(git status 2>&1)

    if [[ "$git_status" =~ (Commit vor |Commits vor| ahead) ]]; then
        echo -e "\e[1;96m"; center "Push"; echo -e "\n\e[0m"

        if [[ $(git log origin/$branch..$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | awk '!x[$0]++' | wc -l) == 1 ]]; then #Doppelte Commits sollen nicht doppelt gerechnet werden
            echo -e "\e[32mSoll die Änderung gepusht werden?\e[0m \e[2m(\"U\" zum Umbenennen des letzten Commits)\e[0m"
            git log origin/$branch..$branch | sed -n 5p
        else
            echo -e "\e[32mSollen die Änderungen gepusht werden?\e[0m \e[2m(\"U\" zum Umbenennen des letzten Commits)\e[0m"
            git log origin/$branch..$branch | grep -v "^Merge\|^Author\|^Date\|Signed-off-by" | egrep -v [a-z0-9]{40} | sed '/^[[:space:]]*$/d' | awk '!x[$0]++' | nl
        fi
        push
    fi

    return 0

}



complete -F _longopt -W "diff pull" diff
